/** package.json
 * 배포한 모듈 정보를 담고자 만들었지만, 노드로 작성하는 애플리케이션도 이 파일로 관리 가능하다.
 * 
 * package.json 파일은 기본적으로 CommonJS의 명세를 충실히 따르고 있으며, JSON 형식의 파일이다.
 * 
 * 직접 작성도 가능하고, 'npm init' 명령으로 자동 생성도 가능하다.
 * 해당 애플리케이션ㅇ늘 위해 사용한 확장 모듈에 대한 정보는 npm install -save를 통해 자동으로 모듈에 대한 정보를 추가할 수 있다.
 */

/** 예시: ./04-1 package.json 
 * name: 프로젝트 이름으로 가장 중요하다. 중앙 저장소 배포시 version과 함께 필수 항목이다.
 *  - URL로 사용되고, 설치될 때 디렉토리 이름이 되기 때문에 URL이나 디렉토리에서 쓸 수 없는 이름으로 하면 안된다.
 *  - 이름에 node나 js가 들어가면 안된다.
 *  - name은 214보다 짧아야 하며, 점(.)이나 밑줄(_)로 시작할 수 없다.
 *  - 대문자를 포함할 수 업 ㅅ고, require() 함수의 인수로 사용되며 짧고 알기 쉬운 것으로 짓는게 좋다.
 * 
 * version: 프로젝트 버젼. 3단계 버전을 사용하며, -로 태그 이름을 적을 수 있다.
 * 
 * description: 프로젝트 설명으로, 문자열로 기술한다.
 *  - npm search로 검색된 리스트에 표시되기 때문에 사람들이 패키지를 찾아내고 이해하는데 도움이 된다.
 * 
 * keywords: 프로젝트를 검색할 떄 참조되는 키워드
 *  - description과 마찬가지로 npm search로 검색된 리스트에 표시된다.
 * 
 * homepage: 프로젝트 홈페이지 주소
 *  - URL 항목과는 다르며, URL을 설정하면 예상치 못한 움직임을 하므로 주의한다.
 * 
 * author: 프로젝트 작성자 정보로, 한 사람만 지정한다. 
 *  - JSON 형식으로 name, email, url 옵션을 포함한다.
 * 
 * contributors: 프로젝트 공헌자 정보로, 여러사람을 배열로 지정할 수 있다.
 * 
 * repository: 프로젝트의 소스코드를 저장한 저장소 정보이다.
 *  - 프로젝트으 ㅣ홈페이지 URL을 명시해서는 안된다.
 * 
 * scripts: 프로젝트에서 자주 실행해야 하는 명령어를 scripts로 작성해두면 npm 명령어로 실행 가능하다.
 * 
 * config: 소스코드에서 config 필드에 있는 값을 환경 변수처럼 사용 가능하다.
 * 
 * private: 이 값을 true로 하면 중앙 저장소로 저장하지 않는다.
 * 
 * dependencies: 프로젝트 의존성 관리로, 이 프로젝트가 어떤 확장 모듈을 요구하는지 정리한다.
 *  - 일반적으로 package.json에서 가장 많은 정보가 입력되는 곳이다.
 *  - 애플리케이션 설치 시 이 내용을 참조하여 필요한 확장 모듈을 자동으로 설치한다.
 *  - npm install 명령은 여기에 포함된 모든 확장 모듈들을 설치하게 되어있다.
 * 
 * devDependendies: 개발할 때만 의존하는 확장 모듈을 관리한다.
 * 
 * engine: 실행 가능한 노드 버전의 범위를 결정한다.
 */ 


