/* 
Socket.io는 비동기 통신을 위한 라이브러리로, 이벤트 기반의 처리에 의존하고 있다. 간단한 예제로 이벤트를 주고받아 보고,
코드를 보면서 socket을 어떻게 이용하는지 알아보자.
*/


/* './03-1 server.js' 코드 설명

- 23번째 줄의 주석 1번까지의 코드는 접속했을 때 index.html 페이지를 불러오고, 에러가 났을때 처리해주는 코드이다.

- 23번쨰 줄에서 보이는 connection은 socket.io의 기본 이벤트로, 사용자가 웹사이트를 열면 자동으로 발생하는 이벤트이다.ㄷ
  이때 이벤트 안의 함수에는 접속한 사용자의 socket이 파라미터로 전달되는데, 접속한 각 클라이언트에 관련한 이벤트들을 작성하려면 이 connection 리스너 함수 안에서 socket을 사용하면 된다.

- connection 안에 각 이벤트를 작성할 때는 socket.on('EVENT 이름', 함수) 형식으로 작성하면 된다. 함수 대신 전달하고 싶은 값이 있다면, 그 값(혹은 변수)를 넣어주어도 된다.

- socket.emit은 event를 발생시키는 함수이다. 이렇게 서버쪽에서 이벤트를 발생시키면 클라이언트 페이지의 해당 이벤트 리스너에서 처리되게 된다. 위 코드에서는 emit을 이용해 "news" 이벤트를 발생시켜 주었다.
socket.emit을 이용하면 해당 socket을 통해 상대편으로 전달하고, io.emit을 이용하면 서버가 현재 접속해있는 모든 클라이언트에게 이벤트를 전달한다. 이 코드에서는 사용자가 맨 처음으로 접속했을 때 news 이벤트가 발생하게 되며, serverData라는 변수에 문자열을 넣어서 전달해주었다.

- 26번쨰 줄 주석 2번에서는 client login이라는 이벤트를 만들어서, 콘솔 창에 전달받은 data를 찍어주었다.

- 30번째 줄 주석 3번에서 보이는 disconnect도 conneciton처럼 socket.io의 기본 이벤트인데, 사용자의 접속이 끊어지면 자동으로 발생한다. 단, disconnect 이벤트는 개별 클라이언트가 접속이 끊어졌을 때 발생하는 이벤트이므로, io.on이 아닌 socket.on으로 작성해주어야 한다. ***
*/

/* 
'./03-1 index.html': 클라이언트 페이지

이 코드의 이벤트 처리는 news 이벤트 하나이다. news 이벤트가 발생하면 클라이언트 페이지에서는 콘솔 창에 전달받은 data를 출력해준다.
여기서 주의할 점은, 서버가 아닌 클라이언트의 콘솔 창에 찍힌다는 것이다. 따라서 웹페이지의 개발자 도구를 클릭하면 출력된 값을 볼 수 있다. 
*/