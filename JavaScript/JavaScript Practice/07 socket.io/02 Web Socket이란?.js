/* Web Socket이란?
웹 소켓은 HTML5 표준 기술로, 사용자의 브라우저와 서버 사이의 동적인 양방향 연결 채널을 구성한다.
Websocket API를 통해 서버로 메시지를 보내고, 요청 없이 응답을 받아오는 것이 가능하다.

현재 API는 W3C에서 관장하며, 프로토콜은 IETF에서 관리한다.

웹소켓은 별도의 포트를 사용하지 않고 HTTP와 같은 80번 포트를 사용하고 있는데, 이 떄문에 클라이언트인 웹 브라우저 뿐만 아니라
웹 서버도 기능을 지원하고 있어야 한다.
*/

/* Socket.io
웹소켓은 HTML5의 기술이기에 오래된 웹 브라우저에서는 지원하지 않는데, 이를 개선하는 것이 socket.io이다.
웹페이지가 열리는 브라우저가 웹소켓을 지원하면 웹소켓 방식으로 동작하고, 지원하지 않는다면 일반 http를 이용해 실시간 통신을 흉내내는 것이다.

Socket.io는 node.js 기반으로 만들어진 기술로, 거의 모든 웹 브라우저와 모바일 장치를 지원하는 실시간 웹 애플리케이션 지원 라이브러리이다.

100% 자바스크립트로 구현되어 있으며, 현존하는 대부분의 실시간 웹 기술들을 추상화해놓았다. 

다시 말해, Socket.io는 자바스크립트를 이용하여 브라우저 종류에 상관없이 실시간 웹을 구현할 수 있도록 한 기술이다.

Socket.io는 웹 브라우저와 웹 서버의 종류와 버전을 파악하여 가장 적합한 기술을 선택하여 사용한다. 만약 브라우저에 FlashSocket이라는 기술을 지원하는 플러그인이 있다면 그것을 사용하고 플러그인이 없으면 AJAX Long Polling 방식을 사용하도록 한다.
*/


/* 왜 웹소켓을 사용하는가?
기존에는 서버와 클라이언트가 실시간으로 상호작용하는 웹 서비스를 개발하기 위해 숨겨진 프레임을 이용하는 방법이나 Long Polling, Stream 등과 같은 다양한 방법을 사용했지만, 이 방식은 브라우저가 HTTP 요청을 보내고 웹 서버가 이 요청에 대한 HTTP 응답을 보내는 단방향의 메시지 교환방식을 유지하는 선에서 구현된 방식이다. 즉, 기존의 방법에 일종의 트릭을 사용한 셈이다.

이 때문에 기존의 웹 기술을 이용하여 실시간 웹 서비스를 만드는 일은 복잡하고 어려웠다.

바로 이런 불편함과 사용자와의 긴밀한 상호작용 웹 구현을 위한 개발자의 요구가 브라우저와 웹 서버 사이으 ㅣ자유로운 양방향 메시지 송수신 방법으로써 HTML5 표준안의 일부인 웹소켓 API가 등장했다.

사용법은 Ajax와 비슷하지만, 개념면에서는 다르다.

Ajax는 웹 브라우저에서 데이터를 호출하면 웹 서버에서 호출된 값을 검색, 작성해서 웹 브라우저로 메시지를 보내는 형식의 구조라면, 웹소켓의 경우는 웹 브라우저에서 호출해서 데이터를 가져가는 기능을 포함하여 반대로 서버에서 클라이언트를 호출할 수 있는 기능까지 있다.

예를 들어 채팅프로그램을 만드는 다 한다면, 우리가 채팅을 서버로 보내는 것은 가능하다. 그러나 Ajax로 만든 웹페이지는 서버측에서 클라이언트가 보낼 수 없다. 대응책으로 10초마다 데이터를 갱신해서 확인할 수 있지만, 웹소켓은 서버에서도 클라이언트를 인지하는 상태이기에 양방향 통신이 가능하다.

HTML5 웹소켓은 매우 유용하나, 브라우저별로 지원하는 버전이 다르며, 오래된 브라우저는 아예 지원하지 않는다. 따라서 어디서든 가능한 Socket.io를 좀더 많이 사용한다.
*/
